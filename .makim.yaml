backend: bash
groups:
  clean:
    env-file: .env
    tasks:
      tmp:
        help: Remove build artifacts, compiled files, and cache
        run: |
          rm -f .coverage
          rm -fr build/
          rm -fr dist/
          rm -fr .eggs/
          rm -fr htmlcov/
          rm -fr .pytest_cache
          rm -fr .ruff_cache
          rm -fr .mypy_cache
          find . -name '*.egg-info' -exec rm -fr {} +
          find . -name '*.egg' -exec rm -f {} +
          find . -name '*.pyc' -exec rm -f {} +
          find . -name '__pycache__' -exec rm -fr {} +
          find . -name '*~' -exec rm -f {} +

  docs:
    help: Commands for building and previewing the documentation
    tasks:
      build:
        help: Build the documentation
        run: mkdocs build --config-file mkdocs.yaml

      preview:
        help: Preview the documentation
        hooks:
          pre-run:
            - task: docs.build
        run: mkdocs serve --watch docs --config-file mkdocs.yaml

  package:
    help: helper commands for handling the package
    tasks:
      build:
        help: Build the project
        run: poetry build

  tests:
    help: Test commands
    tasks:
      linter:
        help: Run lint checks
        run: |
          pre-commit install
          pre-commit run --all-files --verbose

      unit:
        help: Run tests
        args:
          params:
            help: Extra parameters for pytest
            type: string
            default: "-vv"
        run: pytest -s ${{ args.params }} tests

      smoke-1:
        help: Run smoke tests for profile 1
        hooks:
          pre-run:
            - task: docker.killall
        vars:
          SUGAR_FLAGS: --verbose --profile profile1
        run: |
          sugar ${{ vars.SUGAR_FLAGS }} compose build
          sugar ${{ vars.SUGAR_FLAGS }} compose build --all
          sugar ${{ vars.SUGAR_FLAGS }} compose build
          sugar ${{ vars.SUGAR_FLAGS }} compose build --services service1-1
          sugar ${{ vars.SUGAR_FLAGS }} compose pull --all
          sugar ${{ vars.SUGAR_FLAGS }} compose pull
          sugar ${{ vars.SUGAR_FLAGS }} compose pull --services service1-1
          sugar ${{ vars.SUGAR_FLAGS }} compose-ext start --all --options -d
          sugar ${{ vars.SUGAR_FLAGS }} compose-ext restart --all --options -d
          sugar ${{ vars.SUGAR_FLAGS }} compose exec --service service1-1 --options -T --cmd env
          sugar ${{ vars.SUGAR_FLAGS }} compose stop --all
          sugar ${{ vars.SUGAR_FLAGS }} compose run --service service1-1 --options -T --cmd env
          sugar ${{ vars.SUGAR_FLAGS }} compose down

      smoke-2:
        help: Run smoke tests for profile 2
        hooks:
          pre-run:
            - task: docker.killall
        vars:
          SUGAR_FLAGS: --verbose --profile profile2
        run: |
          sugar ${{ vars.SUGAR_FLAGS }} compose build --all
          sugar ${{ vars.SUGAR_FLAGS }} compose build
          sugar ${{ vars.SUGAR_FLAGS }} compose build --services service2-1
          sugar ${{ vars.SUGAR_FLAGS }} compose pull --all
          sugar ${{ vars.SUGAR_FLAGS }} compose stop --all
          sugar ${{ vars.SUGAR_FLAGS }} compose run --service service2-1 --options -T --cmd env
          sugar ${{ vars.SUGAR_FLAGS }} compose down

      smoke-env-files:
        help: Run smoke test for multiple .env files
        hooks:
          pre-run:
            - task: docker.killall
        vars:
          SUGAR_FLAGS: --verbose --file tests/containers/.multiple-env.sugar.yaml --profile profile1
        run: |
          sugar ${{ vars.SUGAR_FLAGS }} compose build
          sugar ${{ vars.SUGAR_FLAGS }} compose up --options -d

          for service in service1-1 service1-3; do
            sugar ${{ vars.SUGAR_FLAGS }} compose exec --service $service --options -T --cmd env | grep "ENV_VAR_1=value1"
            sugar ${{ vars.SUGAR_FLAGS }} compose exec --service $service --options -T --cmd env | grep "ENV_VAR_2=value2"
          done

          sugar ${{ vars.SUGAR_FLAGS }} compose down

      smoke-services:
        help: Run smoke test for services
        hooks:
          pre-run:
            - task: docker.killall
        run: |
          sugar --verbose --file tests/containers/.services.sugar.yaml compose build

      smoke-mix:
        help: Run smoke tests for profile mix
        hooks:
          pre-run:
            - task: docker.killall
        vars:
          SUGAR_FLAGS: --verbose --profile profile-mix
        run: |
          sugar ${{ vars.SUGAR_FLAGS }} compose build --all
          sugar ${{ vars.SUGAR_FLAGS }} compose build
          sugar ${{ vars.SUGAR_FLAGS }} compose build --services service1-1,service2-1
          sugar ${{ vars.SUGAR_FLAGS }} compose pull --all
          sugar ${{ vars.SUGAR_FLAGS }} compose pull
          sugar ${{ vars.SUGAR_FLAGS }} compose pull --services service1-1,service2-1
          sugar ${{ vars.SUGAR_FLAGS }} compose-ext start --all --options -d
          sugar ${{ vars.SUGAR_FLAGS }} compose-ext restart --all --options -d
          sugar ${{ vars.SUGAR_FLAGS }} compose exec --service service2-1 --options -T --cmd env
          sugar ${{ vars.SUGAR_FLAGS }} compose stop --all
          sugar ${{ vars.SUGAR_FLAGS }} compose run --service service2-1 --options -T --cmd env
          sugar ${{ vars.SUGAR_FLAGS }} compose down

      smoke-main:
        help: Run smoke tests for profile main
        hooks:
          pre-run:
            - task: docker.killall
        vars:
          SUGAR_FLAGS: --verbose --profile profile1
        run: |
          # general tests main profile/plugins
          sugar ${{ vars.SUGAR_FLAGS }} compose build
          sugar ${{ vars.SUGAR_FLAGS }} compose config
          sugar ${{ vars.SUGAR_FLAGS }} compose create
          sugar ${{ vars.SUGAR_FLAGS }} compose-ext start --options -d
          sugar ${{ vars.SUGAR_FLAGS }} compose-ext restart --options -d
          sugar ${{ vars.SUGAR_FLAGS }} compose exec --service service1-1 --options -T --cmd env
          sugar ${{ vars.SUGAR_FLAGS }} compose images
          sugar ${{ vars.SUGAR_FLAGS }} compose logs
          # port is not complete supported
          # sugar --verbose compose port --service service1-1
          sugar ${{ vars.SUGAR_FLAGS }} compose ps
          sugar ${{ vars.SUGAR_FLAGS }} compose pull
          sugar ${{ vars.SUGAR_FLAGS }} compose push
          sugar ${{ vars.SUGAR_FLAGS }} compose run --service service1-1 --options -T --cmd env
          sugar ${{ vars.SUGAR_FLAGS }} compose top
          sugar ${{ vars.SUGAR_FLAGS }} compose up --options -d
          sugar ${{ vars.SUGAR_FLAGS }} compose version
          # port is not complete supported
          export SUGAR_PROJECT_NAME="test-`python -c 'from uuid import uuid4; print(uuid4().hex[:7])'`"
          echo $SUGAR_PROJECT_NAME
          sugar ${{ vars.SUGAR_FLAGS }} compose build
          sugar ${{ vars.SUGAR_FLAGS }} compose-ext start --options -d
          sugar ${{ vars.SUGAR_FLAGS }} compose-ext restart --options -d
          # TODO: it seems that the SUGAR_PROJECT_NAME is not used properly from this block
          # docker ps|grep $SUGAR_PROJECT_NAME
          sugar ${{ vars.SUGAR_FLAGS }} compose-ext stop

      smoke-final:
        help: Run final smoke tests
        hooks:
          pre-run:
            - task: docker.killall
        run: |
          sugar --verbose --profile profile-defaults compose-ext restart --options -d
          sugar --verbose --profile profile1 compose pause
          sugar --verbose --profile profile1 compose unpause
          sugar --verbose --profile profile1 compose kill
          sugar --verbose --profile profile1 compose stop
          sugar --verbose --profile profile1 compose rm --options --force
          sugar --verbose --profile profile1 compose down

      smoke-experimental:
        help: Run simple text for experimental commands
        hooks:
          pre-run:
            - task: docker.killall
        run: |
          sugar --verbose compose attach --help
          sugar --verbose compose cp --help
          sugar --verbose compose ls --help
          sugar --verbose compose scale --help
          sugar --verbose compose wait --help
          sugar --verbose compose watch --help

      smoke-swarm:
        help: Run smoke tests for swarm commands
        hooks:
          pre-run:
            # - task: docker.killall
            - task: docker.leave_node
        env:
          SUGAR_FLAGS: --verbose --profile profile1
        run: |
          # Initialize swarm
          sugar ${{ vars.SUGAR_FLAGS }} swarm init --options "--advertise-addr 127.0.0.1"


          # Test stack commands
          echo $'\033[32mTesting stack deployment...\033[0m'
          sugar ${{ vars.SUGAR_FLAGS }} swarm deploy --stack test-stack

          # List services (with and without stack filter)
          echo $'\033[32mTesting service listing...\033[0m'
          sugar ${{ vars.SUGAR_FLAGS }} swarm ls
          sugar ${{ vars.SUGAR_FLAGS }} swarm ls --stack test-stack

          # Test stack ps command
          echo $'\033[32mTesting stack ps command...\033[0m'
          sugar ${{ vars.SUGAR_FLAGS }} swarm ps --stack test-stack

          # Test service inspection
          echo $'\033[32mTesting service inspection...\033[0m'
          sugar ${{ vars.SUGAR_FLAGS }} swarm inspect --services service1-1 --stack test-stack

          # Test service1-1 , service1-2 and service1-3 service three times ping
          for port in 18000 18001 18002; do
            for i in {1..3}; do
              curl -s http://localhost:$port
              echo $'\033[32m - Ping $i to port $port[0m'
            done
          done

          # Test service logs (limited command to avoid test hanging)
          echo $'\033[32mTesting service logs...\033[0m'
          sugar ${{ vars.SUGAR_FLAGS }} swarm logs --services service1-1 --stack test-stack --tail 10
          sugar ${{ vars.SUGAR_FLAGS }} swarm logs --services service1-2 --stack test-stack --tail 10


          # Test service scaling
          echo $'\033[32mTesting service scaling...\033[0m'
          sugar ${{ vars.SUGAR_FLAGS }} swarm scale --stack test-stack --replicas service1-1=2,service1-2=3

          # TODO : sugar swarm update is yet to be implemented and experimental stage
          # Test service update
          # echo "Testing service update..."
          # sugar ${{ vars.SUGAR_FLAGS }} swarm update --services test-stack_service1-1 --replicas 1 --detach

          # Test service rollback
          echo $'\033[32mTesting service rollback specific services in a stack...\033[0m'
          sugar ${{ vars.SUGAR_FLAGS }} swarm rollback --services service1-1,service1-3 --stack test-stack

          # Test rollback with stack parameter
          echo $'\033[32mTesting stack rollback all services in a stack...\033[0m'
          sugar ${{ vars.SUGAR_FLAGS }} swarm rollback --stack test-stack --all

          # Test node commands
          echo $'\033[32mTesting node commands...\033[0m'
          sugar swarm node --ls
          NODE_ID=$(docker node ls --format "{{.ID}}" )
          echo $'\033[32mNode ID: $NODE_ID\033[0m'
          sugar swarm node --inspect $NODE_ID
          sugar swarm node --ps $NODE_ID

          # Clean up services and stack
          echo $'\033[32mCleaning up...\033[0m'
          sugar ${{ vars.SUGAR_FLAGS }} swarm rm --stack test-stack

          # Leave swarm
          docker swarm leave --force

      smoke-hooks:
        help: Run simple text for experimental commands
        hooks:
          pre-run:
            - task: docker.killall
        vars:
          SUGAR_FLAGS: --file .hooks.sugar.yaml
        dir: tests/containers
        run: |
          sugar ${{ vars.SUGAR_FLAGS }} compose config | grep "RUNNING PRE-RUN FOR CONFIG"
          sugar ${{ vars.SUGAR_FLAGS }} compose config | grep "CONFIG EXECUTED WITH SUCCESS"
          sugar ${{ vars.SUGAR_FLAGS }} compose-ext config | grep "RUNNING PRE-RUN FOR CONFIG"
          sugar ${{ vars.SUGAR_FLAGS }} compose-ext config | grep "CONFIG EXECUTED WITH SUCCESS"

      smoke:
        help: Run final smoke tests
        hooks:
          pre-run:
            - task: docker.killall
            - task: tests.smoke-1
            - task: tests.smoke-2
            - task: tests.smoke-env-files
            - task: tests.smoke-mix
            - task: tests.smoke-main
            - task: tests.smoke-final
            - task: tests.smoke-services
            - task: tests.smoke-experimental
            - task: tests.smoke-hooks
        run: |
          sugar --verbose compose --help
          sugar --verbose compose version

  docker:
    help: Commands for docker
    tasks:
      killall:
        help: Kill all running Docker containers
        run: docker kill `docker ps -q` || true
      leave_node:
        help: Leave the swarm
        run: docker node inspect self --format '{{.Spec.Role}}' &>/dev/null && { docker node leave --force && echo "Node left the swarm"; } || echo "Node already left the swarm"

  release:
    vars:
      app: |
        npx --yes \
        -p semantic-release \
        -p conventional-changelog-conventionalcommits@7.0.2 \
        -p "@semantic-release/commit-analyzer" \
        -p "@semantic-release/release-notes-generator" \
        -p "@semantic-release/changelog" \
        -p "@semantic-release/exec" \
        -p "@semantic-release/github" \
        -p "@semantic-release/git" \
        -p "semantic-release-replace-plugin" \
        semantic-release
    tasks:
      ci:
        help: Run semantic-release on CI
        run: |
          ${{ vars.app }} --ci

      dry:
        help: Run semantic-release on CI
        run: |
          ${{ vars.app }} --dry-run
