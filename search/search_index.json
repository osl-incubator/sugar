{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Get Started","text":"<p>Simplify the usage of containers.</p> <p>You may be thinking, why do I need a new library that wrap-up docker-compose or podman-compose if they are already really simple to use?</p> <p>Yes, they are simple to use, but if you have some other parameters to the compose command line, it could be very tedious to write them every time such as <code>--env-file</code>, <code>--project-name</code>, <code>--file</code>, etc.</p> <p>So, in this case we could use something like a script or <code>make</code>, right?</p> <p>Yes, and just for one project it would be good enough. But, if you maintain or collaborate a bunch of projects, it would be like a boiler plate.</p> <p>Additionally, if you are maintaining some extra scripts in order to improve your containers stack, these scripts would be like a boilerplate as well.</p> <p>So, the idea of this project is to organize your stack of containers, gathering some useful scripts and keeping this information centralized in a configuration file. So the command line would be very simple.</p> <ul> <li>License: BSD 3 Clause</li> <li>Documentation: https://osl-incubator.github.io/sugar</li> </ul>"},{"location":"#how-to-install","title":"How to Install","text":"<pre><code>$ pip install containers-sugar\n</code></pre>"},{"location":"#features","title":"Features","text":"<p>The commands from docker-compose available are:</p> <ul> <li>build</li> <li>config</li> <li>create</li> <li>down</li> <li>events</li> <li>exec</li> <li>images</li> <li>kill</li> <li>logs</li> <li>pause</li> <li>port</li> <li>ps</li> <li>pull</li> <li>push</li> <li>restart</li> <li>rm</li> <li>run</li> <li>start</li> <li>stop</li> <li>top</li> <li>unpause</li> <li>up</li> <li>version</li> </ul> <p>These commands are available in the main profile/plugin, so you don't need to specify any extra parameter to access them.</p> <p>For extra commands, we are gathering them into a profile/plugin called <code>ext</code>, so you can access them using something like: <code>sugar compose-ext restart</code>.</p> <p>The current available ext commands are:</p> <ul> <li>start -&gt; alias for <code>up</code></li> <li>restart -&gt; runs <code>stop</code> and <code>up</code></li> </ul> <p>Sugar also provides support for Docker Swarm through the <code>swarm</code> plugin, which includes:</p> <ul> <li>Initialize and manage swarm clusters</li> <li>Deploy and manage stacks</li> <li>Manage services (scaling, updating, rollback)</li> <li>Manage swarm nodes</li> </ul> <p>See the Swarm documentation for more details.</p>"},{"location":"#how-to-use-it","title":"How to use it","text":"<p>First you need to place the config file <code>.sugar.yaml</code> in the root of your project. This is an example of a configuration file:</p> <pre><code>backend: compose\ndefaults:\n  group:   ${{ env.ENV }} \ngroups:\n  group1:\n    project-name: project1\n    config-path:\n      - containers/tests/group1/compose.yaml\n    env-file: .env\n    services:\n      default:\n        - service1\n        - service3\n      available:\n        - name: service1\n        - name: service2\n        - name: service3\n  group2:\n    project-name: null\n    config-path: containers/tests/group2/compose.yaml\n    env-file: .env\n    services:\n      # default: null\n      available:\n        - name: service1\n        - name: service2\n</code></pre> <p>Some examples of how to use it:</p> <ul> <li> <p>build the defaults services (service1,service3) for group1:   <code>sugar build --group group1</code></p> </li> <li> <p>build the all services (there is no default service defined) for group2:   <code>sugar build --group group2</code></p> </li> <li> <p>build all services (ignore default) for group1:   <code>sugar build --group group1 --all</code></p> </li> <li> <p>start the default services for group1: <code>sugar compose-ext start --group group</code></p> </li> <li> <p>restart all services (ignore defaults) for group1:   <code>sugar compose-ext restart --group group1 --all</code></p> </li> <li> <p>restart service1 and service2 for group1:   <code>sugar compose-ext restart --group group1 --services service1,service2</code></p> </li> </ul> <p>NOTE: If you use: <code>default: group:  ${{ env.ENV }}</code>, you don't need to give <code>--group &lt;GROUP_NAME&gt;</code>, except if you want a different group than the default one.</p>"},{"location":"changelog/","title":"Release Notes","text":""},{"location":"changelog/#1170-2025-05-03","title":"1.17.0 (2025-05-03)","text":""},{"location":"changelog/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>docs: Update README.md according to schema.json (#143) (1ec5a60)</li> <li>Fix the get_terminal_size() (#164) (dc9353b)</li> </ul>"},{"location":"changelog/#features","title":"Features","text":"<ul> <li>Add help flag support to CLI in any OS path  (#136) (9ec2a34)</li> <li>Add initial support for 'podman-compose' in sugar (#167) (0e4ee08)</li> <li>Add Initial support for 'swarm' backend in schema ,cli and core extensions (#149) (0631be0)</li> <li>Add support for multiple <code>.env</code> files (#175) (076480e)</li> <li>Add support for positional only (#157) (97c04de)</li> <li>Change services/default property from string to array(list) format (#181) (5b96464)</li> <li>cli: enhance Typer app with subcommand help fallback upon empty command args (#176) (13271c2)</li> </ul>"},{"location":"changelog/#1161-2024-10-17","title":"1.16.1 (2024-10-17)","text":""},{"location":"changelog/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>Fix specification of required attributes in schema.json (#132) (059de08)</li> </ul>"},{"location":"changelog/#1160-2024-10-17","title":"1.16.0 (2024-10-17)","text":""},{"location":"changelog/#features_1","title":"Features","text":"<ul> <li>Check if the .sugar.yaml file is valid according to the schema file (#131) (c5913c8)</li> </ul>"},{"location":"changelog/#1150-2024-10-16","title":"1.15.0 (2024-10-16)","text":""},{"location":"changelog/#features_2","title":"Features","text":"<ul> <li>Add support for pre and post hooks (#130) (74bdada)</li> </ul>"},{"location":"changelog/#1142-2024-10-15","title":"1.14.2 (2024-10-15)","text":""},{"location":"changelog/#bug-fixes_2","title":"Bug Fixes","text":"<ul> <li>Refactor and fix  sugar classes and CLI (#128) (5ee9adf)</li> <li>Refactor the interface for the plugins/extensions, move the main commands to the compose group (#127) (0e0e7fe)</li> <li>Remove breakpoints, fix small issues and add unittests (#129) (62ff5c2)</li> </ul>"},{"location":"changelog/#1141-2024-09-27","title":"1.14.1 (2024-09-27)","text":""},{"location":"changelog/#bug-fixes_3","title":"Bug Fixes","text":"<ul> <li>fix the jinja2 template in the config file (#125) (142b2b7)</li> </ul>"},{"location":"changelog/#1140-2024-07-24","title":"1.14.0 (2024-07-24)","text":""},{"location":"changelog/#features_3","title":"Features","text":"<ul> <li>help: Create a group for plugins in the help menu (#123) (b8980cc)</li> </ul>"},{"location":"changelog/#1130-2024-05-16","title":"1.13.0 (2024-05-16)","text":""},{"location":"changelog/#features_4","title":"Features","text":"<ul> <li>experimental: Add new docker compose commands: attach, cp, ls, scale, wait, watch (#122) (4a28eee)</li> </ul>"},{"location":"changelog/#1120-2024-05-10","title":"1.12.0 (2024-05-10)","text":""},{"location":"changelog/#bug-fixes_4","title":"Bug Fixes","text":"<ul> <li>Improve the usage of flags for the CLI (#121) (c070bde)</li> </ul>"},{"location":"changelog/#features_5","title":"Features","text":"<ul> <li>Implement typer as CLI (#117) (b9def08)</li> </ul>"},{"location":"changelog/#1114-2024-05-07","title":"1.11.4 (2024-05-07)","text":""},{"location":"changelog/#bug-fixes_5","title":"Bug Fixes","text":"<ul> <li>Isolate dependencies for stats plot (#120) (96c6453)</li> </ul>"},{"location":"changelog/#1113-2024-05-07","title":"1.11.3 (2024-05-07)","text":""},{"location":"changelog/#bug-fixes_6","title":"Bug Fixes","text":"<ul> <li>Change rich lower bound pin to &gt;=10.11.0 (#118) (eaa9a55)</li> <li>Fix typo in the release workflow (#119) (16b910b)</li> </ul>"},{"location":"changelog/#1112-2024-03-15","title":"1.11.2 (2024-03-15)","text":""},{"location":"changelog/#bug-fixes_7","title":"Bug Fixes","text":"<ul> <li>Fix package description (#116) (e78f5a5)</li> </ul>"},{"location":"changelog/#1111-2024-02-04","title":"1.11.1 (2024-02-04)","text":""},{"location":"changelog/#bug-fixes_8","title":"Bug Fixes","text":"<ul> <li>Fix initial configuration for stats plot (#114) (4faef7c)</li> </ul>"},{"location":"changelog/#1110-2024-02-04","title":"1.11.0 (2024-02-04)","text":""},{"location":"changelog/#features_6","title":"Features","text":"<ul> <li>Add stats plot command (#113) (15d92cc)</li> </ul>"},{"location":"changelog/#1100-2024-01-25","title":"1.10.0 (2024-01-25)","text":""},{"location":"changelog/#bug-fixes_9","title":"Bug Fixes","text":"<ul> <li>change usage KxgrLogs for KxgrErrorType (#107) (d8d38b2)</li> <li>Check if project-name is null (#106) (82a93df)</li> </ul>"},{"location":"changelog/#features_7","title":"Features","text":"<ul> <li>Add a new key in the root of the config file for services (#110) (7e6eabc)</li> <li>Rename from sugar to core module name (#101) (40dace1)</li> </ul>"},{"location":"changelog/#193-2023-12-24","title":"1.9.3 (2023-12-24)","text":""},{"location":"changelog/#bug-fixes_10","title":"Bug Fixes","text":"<ul> <li>Add services to the config command (#104) (b338796)</li> <li>Fix distlib installation failure (#102) (1b3d79f)</li> </ul>"},{"location":"changelog/#192-2023-12-13","title":"1.9.2 (2023-12-13)","text":""},{"location":"changelog/#bug-fixes_11","title":"Bug Fixes","text":"<ul> <li>Rename project from containers-sugar to sugar and improve docs (#98) (45c51bb)</li> </ul>"},{"location":"changelog/#191-2023-11-15","title":"1.9.1 (2023-11-15)","text":""},{"location":"changelog/#bug-fixes_12","title":"Bug Fixes","text":"<ul> <li>refactor: Change \"service-groups\" to \"groups\" (#86) (98bd82c), closes #60</li> </ul>"},{"location":"changelog/#190-2023-07-19","title":"1.9.0 (2023-07-19)","text":""},{"location":"changelog/#features_8","title":"Features","text":"<ul> <li>Add support for compose v2 (#84) (907b3ad)</li> </ul>"},{"location":"changelog/#180-2023-07-17","title":"1.8.0 (2023-07-17)","text":""},{"location":"changelog/#features_9","title":"Features","text":"<ul> <li>Add default config for project-name (#82) (1dab380)</li> </ul>"},{"location":"changelog/#171-2023-06-15","title":"1.7.1 (2023-06-15)","text":""},{"location":"changelog/#bug-fixes_13","title":"Bug Fixes","text":"<ul> <li>linter: Refactor linter options and fixes issues pointed by linter tools and add new alias to the app (#81) (b6e13df)</li> </ul>"},{"location":"changelog/#170-2023-06-06","title":"1.7.0 (2023-06-06)","text":""},{"location":"changelog/#features_10","title":"Features","text":"<ul> <li>Add support for default option configuration for group service (#80) (0045a4a)</li> </ul>"},{"location":"changelog/#161-2023-06-05","title":"1.6.1 (2023-06-05)","text":""},{"location":"changelog/#bug-fixes_14","title":"Bug Fixes","text":"<ul> <li>ext: Fix restart and start ext commands (#79) (e9622c3)</li> </ul>"},{"location":"changelog/#160-2023-05-27","title":"1.6.0 (2023-05-27)","text":""},{"location":"changelog/#features_11","title":"Features","text":"<ul> <li>Add the alias kxgr to sugar (#75) (67a9d5c)</li> <li>Implement the missing docker-compose commands (#77) (bafbc1d)</li> </ul>"},{"location":"changelog/#150-2023-04-07","title":"1.5.0 (2023-04-07)","text":""},{"location":"changelog/#features_12","title":"Features","text":"<ul> <li>Improve the usage of parameters --cmd and --options (formerly --extras)  (#68) (cebdfd8)</li> </ul>"},{"location":"changelog/#144-2023-04-05","title":"1.4.4 (2023-04-05)","text":""},{"location":"changelog/#bug-fixes_15","title":"Bug Fixes","text":"<ul> <li>Fix the internal usage of the value from --cmd flag (#67) (ac8a048)</li> </ul>"},{"location":"changelog/#143-2023-03-25","title":"1.4.3 (2023-03-25)","text":""},{"location":"changelog/#bug-fixes_16","title":"Bug Fixes","text":"<ul> <li>Remove --volumes from down command (#66) (8bcaae4)</li> </ul>"},{"location":"changelog/#142-2023-03-08","title":"1.4.2 (2023-03-08)","text":""},{"location":"changelog/#bug-fixes_17","title":"Bug Fixes","text":"<ul> <li>Fix the exit function when an error happens (#64) (6305cd8)</li> </ul>"},{"location":"changelog/#141-2023-02-15","title":"1.4.1 (2023-02-15)","text":""},{"location":"changelog/#bug-fixes_18","title":"Bug Fixes","text":"<ul> <li>Use extras for all sub-commands (#38) (41abdeb)</li> </ul>"},{"location":"changelog/#140-2023-02-09","title":"1.4.0 (2023-02-09)","text":""},{"location":"changelog/#features_13","title":"Features","text":"<ul> <li>Add support for multiples compose-path (#37) (c726250)</li> </ul>"},{"location":"changelog/#132-2023-02-09","title":"1.3.2 (2023-02-09)","text":""},{"location":"changelog/#bug-fixes_19","title":"Bug Fixes","text":"<ul> <li>Fix the argument <code>--all</code> (#34) (747a1c0)</li> </ul>"},{"location":"changelog/#131-2023-02-07","title":"1.3.1 (2023-02-07)","text":""},{"location":"changelog/#bug-fixes_20","title":"Bug Fixes","text":"<ul> <li>Fix --extras parameter and improve the CI (#32) (9340712)</li> </ul>"},{"location":"changelog/#130-2023-02-07","title":"1.3.0 (2023-02-07)","text":""},{"location":"changelog/#features_14","title":"Features","text":"<ul> <li>Add extra args and command argument for run and exec action (#31) (e942183)</li> </ul>"},{"location":"changelog/#120-2023-02-06","title":"1.2.0 (2023-02-06)","text":""},{"location":"changelog/#features_15","title":"Features","text":"<ul> <li>Add extra args and command argument for run and exec action (#27) (8680799)</li> </ul>"},{"location":"changelog/#110-2023-01-27","title":"1.1.0 (2023-01-27)","text":""},{"location":"changelog/#features_16","title":"Features","text":"<ul> <li>Add run and exec initial implementation (#21) (332f2bc)</li> </ul>"},{"location":"changelog/#106-2023-01-27","title":"1.0.6 (2023-01-27)","text":""},{"location":"changelog/#bug-fixes_21","title":"Bug Fixes","text":"<ul> <li>Fix env-file access and improve version sub-command output (#17) (bc50bb9)</li> </ul>"},{"location":"changelog/#105-2023-01-26","title":"1.0.5 (2023-01-26)","text":""},{"location":"changelog/#bug-fixes_22","title":"Bug Fixes","text":"<ul> <li>Fix the import of sh lib and add pre-commit run to CI (#16) (ac048e1)</li> </ul>"},{"location":"changelog/#104-2023-01-26","title":"1.0.4 (2023-01-26)","text":""},{"location":"changelog/#bug-fixes_23","title":"Bug Fixes","text":"<ul> <li>Fix the sh call (#15) (6e26308)</li> </ul>"},{"location":"changelog/#103-2023-01-26","title":"1.0.3 (2023-01-26)","text":""},{"location":"changelog/#bug-fixes_24","title":"Bug Fixes","text":"<ul> <li>Suppress traceback from sh (#14) (69902c6)</li> </ul>"},{"location":"changelog/#102-2023-01-26","title":"1.0.2 (2023-01-26)","text":""},{"location":"changelog/#bug-fixes_25","title":"Bug Fixes","text":"<ul> <li>Fix support for python 3.7.1, 3.8, 3.9, 3.10 (#13) (83a9592)</li> </ul>"},{"location":"changelog/#101-2023-01-21","title":"1.0.1 (2023-01-21)","text":""},{"location":"changelog/#bug-fixes_26","title":"Bug Fixes","text":"<ul> <li>Fix quotes used by semantic release replace (#8) (66acb67)</li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p>Your contributions are valued and play a significant role in the continuous improvement of Sugar. We welcome contributions of all forms and acknowledge all efforts.</p>"},{"location":"contributing/#how-you-can-contribute","title":"How You Can Contribute","text":"<p>Contributions can be made in various ways, outlined below:</p>"},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>If you encounter a bug in Sugar, please report it via our GitHub issues page at: https://github.com/osl-incubator/sugar/issues.</p> <p>When reporting a bug, kindly include the following information to aid in the issue's resolution:</p> <ul> <li>The name and version of your operating system.</li> <li>Any relevant details about your setup that might assist in diagnosing the   issue.</li> <li>A step-by-step guide to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>You can contribute by fixing bugs identified in the GitHub issues. Issues tagged with both \"bug\" and \"help wanted\" are available for anyone to work on.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Feature development is another way to contribute. Review the GitHub issues for requested features. Issues labeled with \"enhancement\" and \"help wanted\" are open for implementation.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>There's always a need for more documentation for Sugar. This could be through enhancing the official documentation, contributing to docstrings, or sharing knowledge via blog posts, articles, and other media.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>Feedback is crucial for project improvement. To submit feedback or propose a feature:</p> <ul> <li>File an issue at   https://github.com/osl-incubator/sugar/issues.</li> <li>For feature proposals, please provide a detailed explanation of how the   feature would function, aim for a narrow scope to facilitate easier   implementation, and remember, Sugar is a volunteer-driven project, and we   welcome contributions.</li> </ul>"},{"location":"contributing/#requirements","title":"Requirements","text":"<p>Before you begin contributing to the Sugar project, there are several technical prerequisites and best practices you should be familiar with. This section outlines the key requirements to ensure a smooth and productive contribution process.</p>"},{"location":"contributing/#conda-environment","title":"Conda Environment","text":"<p>Conda is a versatile tool that provides package, dependency, and environment management for various programming languages. In the Sugar project, we leverage Conda to manage virtual environments and package dependencies effectively.</p> <ul> <li>Environment Setup: We strongly advise using a Conda environment while   working with Sugar. If Conda is not installed on your system, you can download   it from Miniforge. For an   introductory overview of Conda, consider watching this   Conda Basics video.</li> <li>Best Practices: Avoid installing packages in the base Conda environment.   Always create and activate a new environment for each project to prevent   dependency conflicts and ensure a clean workspace.</li> </ul>"},{"location":"contributing/#git","title":"Git","text":"<p>Our collaborative efforts are facilitated through Git and GitHub. Understanding the fundamentals of Git is crucial for effective participation.</p> <ul> <li>Learning Resources: If you're new to Git, we recommend starting with the   Software Carpentry Git Lesson,   which covers essential Git concepts and workflows.</li> <li>Quick Reference: For a concise summary of common Git commands, refer to   this   Git Cheat Sheet   provided by GitHub.</li> <li>Configuration Tips:</li> <li>To streamline your workflow, configure Git to use <code>rebase</code> by default for     pulling changes with <code>git config --global pull.rebase true</code>.</li> <li>Familiarize yourself with the <code>git rebase</code> command for updating branches     from a remote repository. Although more complex, it is preferred over the     default merge commit strategy. For an in-depth explanation, visit     Atlassian's guide on merging vs. rebasing.</li> <li>Workflow: The standard open-source development workflow includes forking a   repository, cloning the fork locally, and configuring an <code>upstream</code> remote for   the original repository. Detailed instructions can be found in   GitHub's guide to configuring a remote for a fork.</li> </ul>"},{"location":"contributing/#python","title":"Python","text":"<p>Familiarity with Python and adherence to best practices is important for contributing to Sugar.</p> <ul> <li>Style Guide: Follow the PEP 8 style guide for Python code, available at   PEP8.</li> <li>Best Practices: pyOpenSci offers a comprehensive guide for writing Python   packages, which can be found   here.</li> <li>Advanced Learning: To deepen your understanding of Python and general   programming concepts, consider enrolling in the   Design of Computer Programs   course on Udacity. Though challenging and based on Python 2, it provides   valuable insights into advanced Python usage and computer programming   principles.</li> </ul>"},{"location":"contributing/#docker","title":"Docker","text":"<p>Docker and Docker Compose are fundamental components within the sugar project infrastructure. These technologies facilitate the creation, deployment, and management of isolated environments, making them integral to development and testing processes in sugar.</p> <p>To gain a foundational understanding of Docker and Docker Compose, consider exploring the following tutorial, which provides a comprehensive introduction to both technologies: Educative: Docker Compose Tutorial. This resource is designed to help newcomers grasp the essentials of Docker and Docker Compose, covering everything from basic concepts to advanced usage scenarios.</p> <p>A thorough comprehension of Docker and Docker Compose is crucial for contributing to the sugar project, as all development and deployment workflows are designed around these technologies.</p>"},{"location":"contributing/#how-to-get-support","title":"How to Get Support","text":"<p>Should you require assistance, please join our community on the Open Science Labs Discord server at https://opensciencelabs.org/discord. Here, you can participate in the incubator program and ask questions about Sugar in its dedicated channel. You are also welcome to explore and join other groups that align with your interests.</p>"},{"location":"contributing/#setting-up-for-local-development","title":"Setting Up for Local Development","text":"<p>To contribute to <code>sugar</code>, follow these steps to set up your development environment:</p> <ol> <li> <p>Fork the Repository: Begin by forking the <code>sugar</code> repository on GitHub to    your own account.</p> </li> <li> <p>Clone Your Fork Locally: Clone the forked repository to your local    machine and navigate into the project directory.</p> </li> </ol> <pre><code>$ git clone git@github.com:your_username/sugar.git\n$ cd sugar\n</code></pre> <ol> <li>Install Dependencies: Use <code>mamba</code> to create a Conda environment and    <code>poetry</code> for managing Python dependencies.</li> </ol> <pre><code>$ mamba env create --file conda/dev.yaml --yes\n$ poetry config virtualenvs.create false\n$ poetry install\n</code></pre> <ol> <li>Create a Development Branch: Make a dedicated branch for your bugfix or    feature.</li> </ol> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <ol> <li> <p>Make Changes Locally: You are now ready to implement your changes or    improvements.</p> </li> <li> <p>Install and Use Pre-commit Hooks: <code>sugar</code> utilizes <code>pre-commit</code> hooks to    ensure code quality. Install them locally and they will automatically run on    each commit.</p> </li> </ol> <pre><code>$ pre-commit install\n$ pre-commit run --all-files\n</code></pre> <p>To bypass the hooks temporarily, use <code>git commit</code> with <code>--no-verify</code>.</p> <ol> <li>Run Smoke Tests: Quickly validate the functionality of your changes with    smoke tests.</li> </ol> <pre><code>$ makim tests.smoke\n</code></pre> <p>Always complement smoke tests with thorough unit testing to ensure code    integrity.</p> <ol> <li>Unit Testing with <code>pytest</code>: <code>sugar</code> leverages <code>pytest</code> for unit testing,    along with <code>pytest-cov</code> for coverage analysis. Run unit tests using:</li> </ol> <pre><code>$ python -m pytest\n</code></pre> <p>or</p> <pre><code>$ makim tests.unittest\n</code></pre> <ol> <li>Commit and Push Changes: Stage, commit, and push your changes to GitHub.    After setting the upstream branch once, subsequent pushes only require    <code>git push</code>.</li> </ol> <pre><code>$ git add .\n$ git commit -m \"Detailed description of your changes.\"\n$ git push --set-upstream origin &lt;branch name&gt;\n</code></pre> <ol> <li>Submit a Pull Request: Once your changes are pushed, go to the GitHub     website to submit a pull request for review.</li> </ol>"},{"location":"contributing/#release-process","title":"Release Process","text":"<p>The Sugar project utilizes <code>semantic-release</code> to automate the release process, basing new releases on the content of commit messages.</p>"},{"location":"contributing/#commit-message-format","title":"Commit Message Format","text":"<p><code>semantic-release</code> analyzes commit messages to assess the impact of changes made to the codebase. Adhering to a standardized commit message format allows <code>semantic-release</code> to automatically determine the next semantic version number, generate a comprehensive changelog, and publish the release.</p> <p>While <code>semantic-release</code> defaults to the Angular Commit Message Conventions, Sugar adopts the \"Conventional Commits\" standard (https://www.conventionalcommits.org/en/v1.0.0/). This standard facilitates more detailed commit messages, especially for \"breaking changes\".</p> <p>Given the project's use of the <code>squash and merge</code> strategy for merging pull requests, it is crucial to format the PR title according to the commit message standards.</p> <p>To aid contributors in crafting compliant commit messages, tools like commitizen and commitlint are recommended. These tools help ensure that commit messages adhere to the required format.</p> <p>The following table illustrates how different commit messages correspond to the type of release generated by <code>semantic-release</code>, according to its default configuration:</p> Commit Message Example Release Type <code>fix(pencil): stop graphite breaking when too much pressure</code> Patch Release <code>feat(pencil): add 'graphiteWidth' option</code> Minor Release <code>perf(pencil): optimize 'graphiteWidth' calculation</code> Patch Release <code>fix(pencil)!: 'graphiteWidth' option removed</code> Major Release <p>Note: Within the Conventional Commits standard, appending <code>!</code> to the message prefix indicates a breaking change.</p> <p>For more details on the commit message format used by <code>semantic-release</code>, visit the semantic-release documentation.</p>"},{"location":"example/","title":"sugar","text":"In\u00a0[\u00a0]: Copied! <pre>import sugar\n</pre> import sugar"},{"location":"example/#sugar","title":"sugar\u00b6","text":"<p>sugar is Python library that aims to do ...</p>"},{"location":"example/#getting-started","title":"Getting Started\u00b6","text":"<p>First, check our documentation about the installation.</p> <p>Now, let's import our library:</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install sugar, run this command in your terminal:</p> <pre><code>$ pip install containers-sugar\n</code></pre> <p>Sugar is also available on conda-forge</p> <pre><code>$ conda install -c conda-forge containers-sugar\n</code></pre> <p>This is the preferred method to install sugar, as it will always install the most recent stable release.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>The sources for sugar can be downloaded from the Github repo.</p> <p>You can either clone the public repository:</p> <pre><code>$ git clone https://github.com/osl-incubator/sugar.git\n</code></pre> <p>Or download the tarball:</p> <pre><code>$ curl -OJL https://github.com/osl-incubator/sugar.git/tarball/main\n</code></pre> <p>Once you have a copy of the source, you can install it with:</p> <pre><code>$ poetry install\n</code></pre>"},{"location":"podman-ext/","title":"Podman Extension (Experimental)","text":"<p>Experimental</p> <p>This feature is experimental and may change in future releases.</p> <p>Info</p> <p>Sugar's podman-ext extension includes both standard Podman commands and experimental features like <code>attach</code>, <code>cp</code>, <code>ls</code>, <code>scale</code>, and <code>watch</code> that won't work currently in container operations.</p> <p>Sugar provides support for Podman Compose through the <code>podman-ext</code> extension. This extension allows you to use Podman as a container engine backend instead of Docker.</p>"},{"location":"podman-ext/#overview","title":"Overview","text":"<p>Podman is a daemonless container engine for developing, managing, and running OCI containers on your Linux system. The <code>podman-ext</code> extension in Sugar provides a seamless interface to work with Podman Compose, similar to how you would use Docker Compose.</p>"},{"location":"podman-ext/#prerequisites","title":"Prerequisites","text":"<p>To use the <code>podman-ext</code> extension, you need to have the following installed:</p> <ul> <li>Podman (latest version recommended)</li> <li>podman-compose</li> </ul> <p>You can install podman-compose using pip:</p> <pre><code>pip install podman-compose\n</code></pre>"},{"location":"podman-ext/#configuration","title":"Configuration","text":"<p>The configuration for Podman extension is the same as for Docker Compose. You need to specify the backend, groups, and other parameters in the <code>.sugar.yaml</code> file:</p> <pre><code>backend: podman\ndefaults:\n  group: development\ngroups:\n  development:\n    project-name: my-project\n    config-path:\n      - containers/compose.yaml\n    env-file: .env\n    services:\n      default:\n        - app\n        - database\n      available:\n        - name: app\n        - name: database\n        - name: redis\n</code></pre>"},{"location":"podman-ext/#commands","title":"Commands","text":"<p>The <code>podman-ext</code> extension provides the same set of commands as the Docker Compose extension. Here are the available commands:</p>"},{"location":"podman-ext/#basic-commands","title":"Basic Commands","text":"<ul> <li><code>sugar podman-ext build</code>: Build or rebuild services</li> <li><code>sugar podman-ext config</code>: Parse, resolve and render compose file in canonical   format</li> <li><code>sugar podman-ext create</code>: Create services</li> <li><code>sugar podman-ext down</code>: Stop and remove containers, networks</li> <li><code>sugar podman-ext exec</code>: Execute a command in a running container</li> <li><code>sugar podman-ext images</code>: List images used by the created containers</li> <li><code>sugar podman-ext kill</code>: Kill containers</li> <li><code>sugar podman-ext logs</code>: View output from containers</li> <li><code>sugar podman-ext pause</code>: Pause services</li> <li><code>sugar podman-ext ps</code>: List containers</li> <li><code>sugar podman-ext pull</code>: Pull service images</li> <li><code>sugar podman-ext push</code>: Push service images</li> <li><code>sugar podman-ext restart</code>: Restart services</li> <li><code>sugar podman-ext rm</code>: Remove stopped containers</li> <li><code>sugar podman-ext run</code>: Run a one-off command on a service</li> <li><code>sugar podman-ext start</code>: Start services</li> <li><code>sugar podman-ext stop</code>: Stop services</li> <li><code>sugar podman-ext top</code>: Display running processes</li> <li><code>sugar podman-ext unpause</code>: Unpause services</li> <li><code>sugar podman-ext up</code>: Create and start containers</li> <li><code>sugar podman-ext version</code>: Show the podman-compose version information</li> </ul>"},{"location":"podman-ext/#experimental-commands","title":"Experimental Commands","text":"<ul> <li><code>sugar podman-ext attach</code>: Attach to a service's container</li> <li><code>sugar podman-ext cp</code>: Copy files/folders between a container and the local   filesystem</li> <li><code>sugar podman-ext ls</code>: List containers</li> <li><code>sugar podman-ext scale</code>: Scale services</li> <li><code>sugar podman-ext wait</code>: Block until the first service container stops</li> <li><code>sugar podman-ext watch</code>: Watch build context for service source code changes   and rebuild/refresh containers</li> </ul>"},{"location":"podman-ext/#how-to-use","title":"How to Use","text":"<p>You can use the <code>podman-ext</code> extension just like you would use the standard Docker Compose commands with Sugar. Here are some examples:</p>"},{"location":"podman-ext/#building-services","title":"Building Services","text":"<pre><code># Build default services defined in the configuration\nsugar podman-ext build\n\n# Build all services, ignoring defaults\nsugar podman-ext build --all\n\n# Build specific services\nsugar podman-ext build --services app,database\n</code></pre>"},{"location":"podman-ext/#running-services","title":"Running Services","text":"<pre><code># Start default services\nsugar podman-ext start\n\n# Start all services in detached mode\nsugar podman-ext start --all --options -d\n\n# Start specific services in detached mode\nsugar podman-ext start --services app,database --options -d\n</code></pre>"},{"location":"podman-ext/#executing-commands","title":"Executing Commands","text":"<pre><code># Execute a command in a running service container\nsugar podman-ext exec --service app --cmd \"python manage.py migrate\"\n\n# Get a shell in a running service container\nsugar podman-ext exec --service database --cmd \"bash\"\n</code></pre>"},{"location":"podman-ext/#environment-variables","title":"Environment Variables","text":"<p>Like the Docker Compose extension, the Podman extension supports the use of environment variables specified in the <code>env-file</code> parameter:</p> <pre><code>groups:\n  development:\n    env-file: .env\n    # Other configuration...\n</code></pre>"},{"location":"podman-ext/#differences-from-docker-compose","title":"Differences from Docker Compose","text":"<p>While Sugar aims to provide a consistent interface for both Docker Compose and Podman Compose, there are some differences to be aware of:</p> <ol> <li>Podman Compose uses <code>-f</code> instead of <code>--file</code> for specifying compose files    (handled automatically by Sugar)</li> <li>Podman Compose uses <code>-p</code> instead of <code>--project-name</code> for specifying project    names (handled automatically by Sugar)</li> <li>Podman Compose doesn't directly support the <code>--env-file</code> flag, so Sugar loads    the environment variables before executing commands</li> </ol> <p>Note</p> <ol> <li>There is no such flag <code>-d</code> present in <code>--options</code> for    <code>sugar podman-ext start</code>.</li> <li>Experimental commands like <code>attach</code>, <code>cp</code>, <code>ls</code>, <code>scale</code>, and <code>watch</code> may have    different behavior between Podman versions. These commands are not supported currently in Sugar</li> <li>The <code>wait</code> command is still in development.</li> </ol>"},{"location":"podman-ext/#troubleshooting","title":"Troubleshooting","text":"<p>If you encounter issues with the Podman extension:</p> <ol> <li>Make sure Podman and podman-compose are properly installed and accessible in    your PATH</li> <li>Check that your <code>.sugar.yaml</code> configuration is correctly set up</li> <li>Run commands with the <code>--verbose</code> flag to see detailed output</li> <li>If a command fails, check the error message for clues about what went wrong</li> </ol> <p>For more advanced troubleshooting, you can also directly use podman-compose commands to verify functionality outside of Sugar.</p>"},{"location":"swarm/","title":"Sugar Swarm Commands","text":"<p>Sugar provides support for Docker Swarm commands through its swarm extension. This allows you to manage Docker Swarm clusters, services, and stacks using a simplified interface.</p>"},{"location":"swarm/#overview","title":"Overview","text":"<p>The swarm extension provides commands for:</p> <ul> <li>Initializing and joining swarm clusters</li> <li>Deploying, inspecting, and removing stacks</li> <li>Managing swarm services (listing, scaling, updating, rolling back)</li> <li>Managing swarm nodes</li> </ul>"},{"location":"swarm/#configuration","title":"Configuration","text":"<p>To use the swarm extension, you need to set the backend to <code>swarm</code> in your <code>.sugar.yaml</code> configuration file:</p> <pre><code>backend: compose\nenv-file: .env\ndefaults:\n  profile: profile1\n  project-name: sugar\nprofiles:\n  profile1:\n    project-name: project1\n    config-path: tests/containers/profile1/compose.yaml\n    env-file: .env\n    services:\n      default: service1-1,service1-3\n      available:\n        - name: service1-1\n        - name: service1-2\n        - name: service1-3\n  profile2:\n    config-path: tests/containers/profile2/compose.yaml\n    env-file: .env\n    services:\n      available:\n        - name: service2-1\n        - name: service2-2\n</code></pre>"},{"location":"swarm/#basic-commands","title":"Basic Commands","text":""},{"location":"swarm/#initialize-a-swarm","title":"Initialize a Swarm","text":"<p>Initialize a new Docker Swarm on the current engine:</p> <pre><code>$ sugar swarm init --options \"--advertise-addr 192.168.1.1\"\n</code></pre>"},{"location":"swarm/#join-a-swarm","title":"Join a Swarm","text":"<p>Join an existing swarm as a worker or manager node:</p> <pre><code>$ sugar swarm join --options \"--token SWMTKN-1-... 192.168.1.1:2377\"\n</code></pre>"},{"location":"swarm/#stack-management","title":"Stack Management","text":""},{"location":"swarm/#deploy-a-stack","title":"Deploy a Stack","text":"<p>Deploy a stack from a sugar compose file:</p> <pre><code>$ sugar swarm deploy --stack my_stack --file ./.sugar-prod.yml\n</code></pre> <p>or</p> <p>if <code>.sugar.yml</code> file is present in the your current project root directory</p> <pre><code>$ sugar swarm deploy --stack my_stack\n</code></pre> <p>You can also use a <code>profile2</code> compose file:</p> <pre><code>$ sugar swarm deploy --stack my_stack --profile profile2\n</code></pre>"},{"location":"swarm/#list-services-in-a-stack","title":"List Services in a Stack","text":"<p>List services in a specific stack:</p> <pre><code>$ sugar swarm ls --stack my_stack\n</code></pre>"},{"location":"swarm/#list-tasks-in-a-stack","title":"List Tasks in a Stack","text":"<p>List the tasks in a stack:</p> <pre><code>$ sugar swarm ps --stack my_stack\n</code></pre>"},{"location":"swarm/#remove-a-stack","title":"Remove a Stack","text":"<p>Remove a deployed stack:</p> <pre><code>$ sugar swarm rm --stack my_stack\n</code></pre>"},{"location":"swarm/#service-management","title":"Service Management","text":""},{"location":"swarm/#list-all-services","title":"List All Services","text":"<p>List all services in the swarm:</p> <pre><code>$ sugar swarm ls\n</code></pre> <p>List all services in a specific stack in the swarm</p> <pre><code>$ sugar swarm ls --stack my_stack\n</code></pre>"},{"location":"swarm/#node-management","title":"Node Management","text":"<p>Sugar provides a complete set of commands to manage swarm nodes through the <code>node</code> subcommand:</p>"},{"location":"swarm/#list-nodes","title":"List Nodes","text":"<pre><code>$ sugar swarm node ls\n</code></pre>"},{"location":"swarm/#inspect-nodes","title":"Inspect Nodes","text":"<pre><code>$ sugar swarm node --inspect node-id1,node-id2\n</code></pre>"},{"location":"swarm/#promote-nodes","title":"Promote Nodes","text":"<p>Promote a worker node to manager:</p> <pre><code>$ sugar swarm node --promote node-id\n</code></pre>"},{"location":"swarm/#demote-nodes","title":"Demote Nodes","text":"<p>Demote a manager node to worker:</p> <pre><code>$ sugar swarm node --demote node-id\n</code></pre>"},{"location":"swarm/#list-tasks-on-a-node","title":"List Tasks on a Node","text":"<pre><code>$ sugar swarm node --ps node-id\n</code></pre>"},{"location":"swarm/#remove-nodes","title":"Remove Nodes","text":"<pre><code>$ sugar swarm node --rm node-id\n</code></pre>"},{"location":"swarm/#update-nodes","title":"Update Nodes","text":"<pre><code>$ sugar swarm node --update node-id --options \"--availability drain\"\n</code></pre>"},{"location":"swarm/#command-options","title":"Command Options","text":"<p>Most swarm commands accept the following common options:</p> <ul> <li><code>--profile</code>: Specify the profile name to use</li> <li><code>--options</code>: Pass additional options to the underlying Docker command</li> <li><code>--services</code>: Specify a comma-separated list of services</li> <li><code>--all</code>: Apply the command to all services</li> <li><code>--stack</code>: Specify a stack name for stack operations</li> </ul>"},{"location":"swarm/#advanced-usage","title":"Advanced Usage","text":""},{"location":"swarm/#using-multiple-options","title":"Using Multiple Options","text":"<p>You can combine multiple options for complex operations:</p> <pre><code>$ sugar swarm update --services web-service --image nginx:alpine --replicas 3 --detach --env_add \"MODE=production,DEBUG=false\"\n</code></pre>"},{"location":"swarm/#using-with-profiles","title":"Using with Profiles","text":"<p>Leverage Sugar profiles to manage different Swarm configurations:</p> <p>Production Profile:</p> <pre><code>$ sugar --profile production swarm deploy --stack my_stack\n</code></pre> <p>Development Profile:</p> <pre><code>$ sugar --profile dev swarm deploy --stack my_stack\n</code></pre> <p>Testing Profile:</p> <pre><code>$ sugar --profile test swarm deploy --stack my_stack\n</code></pre> <p>This allows you to maintain different configurations for different environments within the same project.</p>"}]}