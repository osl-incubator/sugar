{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Get Started","text":"<p>Simplify the usage of containers.</p> <p>You may be thinking, why do I need a new library that wrap-up docker-compose or podman-compose if they are already really simple to use?</p> <p>Yes, they are simple to use, but if you have some other parameters to the compose command line, it could be very tedious to write them every time such as <code>--env-file</code>, <code>--project-name</code>, <code>--file</code>, etc.</p> <p>So, in this case we could use something like a script or <code>make</code>, right?</p> <p>Yes, and just for one project it would be good enough. But, if you maintain or collaborate a bunch of projects, it would be like a boiler plate.</p> <p>Additionally, if you are maintaining some extra scripts in order to improve your containers stack, these scripts would be like a boilerplate as well.</p> <p>So, the idea of this project is to organize your stack of containers, gathering some useful scripts and keeping this information centralized in a configuration file. So the command line would be very simple.</p> <ul> <li>License: BSD 3 Clause</li> <li>Documentation: https://osl-incubator.github.io/sugar</li> </ul>"},{"location":"#features","title":"Features","text":"<p>The commands from docker-compose available are:</p> <ul> <li>build</li> <li>config</li> <li>create</li> <li>down</li> <li>events</li> <li>exec</li> <li>images</li> <li>kill</li> <li>logs</li> <li>pause</li> <li>port</li> <li>ps</li> <li>pull</li> <li>push</li> <li>restart</li> <li>rm</li> <li>run</li> <li>start</li> <li>stop</li> <li>top</li> <li>unpause</li> <li>up</li> <li>version</li> </ul> <p>These commands are available in the main profile/plugin, so you don't need to specify any extra parameter to access them.</p> <p>For extra commands, we are gathering them into a profile/plugin called <code>ext</code>, so you can access them using something like: <code>sugar ext restart</code>.</p> <p>The current available ext commands are:</p> <ul> <li>start -&gt; alias for <code>up</code></li> <li>restart -&gt; runs <code>stop</code> and <code>up</code></li> </ul>"},{"location":"#how-to-use-it","title":"How to use it","text":"<p>First you need to place the config file <code>.sugar.yaml</code> in the root of your project. This is an example of a configuration file:</p> <pre><code>version: 1.0\ncompose-app: docker-compose\ndefault:\n  group: {{ env.ENV }}\ngroups:\n  - name: group1\n    project-name: project1\n    compose-path: containers/tests/group1/compose.yaml\n    env-file: .env\n    services:\n      default:\n        - service1\n        - service3\n      available:\n        - name: service1\n        - name: service2\n        - name: service3\n  - name: group2\n    project-name: null\n    compose-path: containers/tests/group2/compose.yaml\n    env-file: .env\n    services:\n      # default: null\n      available:\n        - name: service1\n        - name: service1\n</code></pre> <p>NOTE: sugar has an convenient alias <code>sugar</code> that helps to keep the command line shorter, where k stands for containers, x stands for su (shu sound), and gr stands for gar. In another words, you can use <code>sugar</code> or <code>sugar</code> CLI.</p> <p>Some examples of how to use it:</p> <ul> <li> <p>build the defaults services (service1,service3) for group1:   <code>sugar build --group group1</code></p> </li> <li> <p>build the all services (there is no default service defined) for group2:   <code>sugar build --group group2</code></p> </li> <li> <p>build all services (ignore default) for group1:   <code>sugar build --group group1 --all</code></p> </li> <li> <p>start the default services for group1:   <code>sugar ext start --group group1</code></p> </li> <li> <p>restart all services (ignore defaults) for group1:   <code>sugar ext restart --group group1 --all</code></p> </li> <li> <p>restart service1 and service2 for group1:   <code>sugar ext restart --group group1 --services service1,service2</code></p> </li> </ul> <p>NOTE: If you use: <code>default: group: {{ env.ENV }}</code>, you don't need to give <code>--group &lt;GROUP_NAME&gt;</code>, except if you want a different group than the default one.</p>"},{"location":"changelog/","title":"Release Notes","text":""},{"location":"changelog/#192-2023-12-13","title":"1.9.2 (2023-12-13)","text":""},{"location":"changelog/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>Rename project from containers-sugar to sugar and improve docs (#98) (45c51bb)</li> </ul>"},{"location":"changelog/#191-2023-11-15","title":"1.9.1 (2023-11-15)","text":""},{"location":"changelog/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>refactor: Change \"service-groups\" to \"groups\" (#86) (98bd82c), closes #60</li> </ul>"},{"location":"changelog/#190-2023-07-19","title":"1.9.0 (2023-07-19)","text":""},{"location":"changelog/#features","title":"Features","text":"<ul> <li>Add support for compose v2 (#84) (907b3ad)</li> </ul>"},{"location":"changelog/#180-2023-07-17","title":"1.8.0 (2023-07-17)","text":""},{"location":"changelog/#features_1","title":"Features","text":"<ul> <li>Add default config for project-name (#82) (1dab380)</li> </ul>"},{"location":"changelog/#171-2023-06-15","title":"1.7.1 (2023-06-15)","text":""},{"location":"changelog/#bug-fixes_2","title":"Bug Fixes","text":"<ul> <li>linter: Refactor linter options and fixes issues pointed by linter tools and add new alias to the app (#81) (b6e13df)</li> </ul>"},{"location":"changelog/#170-2023-06-06","title":"1.7.0 (2023-06-06)","text":""},{"location":"changelog/#features_2","title":"Features","text":"<ul> <li>Add support for default option configuration for group service (#80) (0045a4a)</li> </ul>"},{"location":"changelog/#161-2023-06-05","title":"1.6.1 (2023-06-05)","text":""},{"location":"changelog/#bug-fixes_3","title":"Bug Fixes","text":"<ul> <li>ext: Fix restart and start ext commands (#79) (e9622c3)</li> </ul>"},{"location":"changelog/#160-2023-05-27","title":"1.6.0 (2023-05-27)","text":""},{"location":"changelog/#features_3","title":"Features","text":"<ul> <li>Add the alias kxgr to sugar (#75) (67a9d5c)</li> <li>Implement the missing docker-compose commands (#77) (bafbc1d)</li> </ul>"},{"location":"changelog/#150-2023-04-07","title":"1.5.0 (2023-04-07)","text":""},{"location":"changelog/#features_4","title":"Features","text":"<ul> <li>Improve the usage of parameters --cmd and --options (formerly --extras)  (#68) (cebdfd8)</li> </ul>"},{"location":"changelog/#144-2023-04-05","title":"1.4.4 (2023-04-05)","text":""},{"location":"changelog/#bug-fixes_4","title":"Bug Fixes","text":"<ul> <li>Fix the internal usage of the value from --cmd flag (#67) (ac8a048)</li> </ul>"},{"location":"changelog/#143-2023-03-25","title":"1.4.3 (2023-03-25)","text":""},{"location":"changelog/#bug-fixes_5","title":"Bug Fixes","text":"<ul> <li>Remove --volumes from down command (#66) (8bcaae4)</li> </ul>"},{"location":"changelog/#142-2023-03-08","title":"1.4.2 (2023-03-08)","text":""},{"location":"changelog/#bug-fixes_6","title":"Bug Fixes","text":"<ul> <li>Fix the exit function when an error happens (#64) (6305cd8)</li> </ul>"},{"location":"changelog/#141-2023-02-15","title":"1.4.1 (2023-02-15)","text":""},{"location":"changelog/#bug-fixes_7","title":"Bug Fixes","text":"<ul> <li>Use extras for all sub-commands (#38) (41abdeb)</li> </ul>"},{"location":"changelog/#140-2023-02-09","title":"1.4.0 (2023-02-09)","text":""},{"location":"changelog/#features_5","title":"Features","text":"<ul> <li>Add support for multiples compose-path (#37) (c726250)</li> </ul>"},{"location":"changelog/#132-2023-02-09","title":"1.3.2 (2023-02-09)","text":""},{"location":"changelog/#bug-fixes_8","title":"Bug Fixes","text":"<ul> <li>Fix the argument <code>--all</code> (#34) (747a1c0)</li> </ul>"},{"location":"changelog/#131-2023-02-07","title":"1.3.1 (2023-02-07)","text":""},{"location":"changelog/#bug-fixes_9","title":"Bug Fixes","text":"<ul> <li>Fix --extras parameter and improve the CI (#32) (9340712)</li> </ul>"},{"location":"changelog/#130-2023-02-07","title":"1.3.0 (2023-02-07)","text":""},{"location":"changelog/#features_6","title":"Features","text":"<ul> <li>Add extra args and command argument for run and exec action (#31) (e942183)</li> </ul>"},{"location":"changelog/#120-2023-02-06","title":"1.2.0 (2023-02-06)","text":""},{"location":"changelog/#features_7","title":"Features","text":"<ul> <li>Add extra args and command argument for run and exec action (#27) (8680799)</li> </ul>"},{"location":"changelog/#110-2023-01-27","title":"1.1.0 (2023-01-27)","text":""},{"location":"changelog/#features_8","title":"Features","text":"<ul> <li>Add run and exec initial implementation (#21) (332f2bc)</li> </ul>"},{"location":"changelog/#106-2023-01-27","title":"1.0.6 (2023-01-27)","text":""},{"location":"changelog/#bug-fixes_10","title":"Bug Fixes","text":"<ul> <li>Fix env-file access and improve version sub-command output (#17) (bc50bb9)</li> </ul>"},{"location":"changelog/#105-2023-01-26","title":"1.0.5 (2023-01-26)","text":""},{"location":"changelog/#bug-fixes_11","title":"Bug Fixes","text":"<ul> <li>Fix the import of sh lib and add pre-commit run to CI (#16) (ac048e1)</li> </ul>"},{"location":"changelog/#104-2023-01-26","title":"1.0.4 (2023-01-26)","text":""},{"location":"changelog/#bug-fixes_12","title":"Bug Fixes","text":"<ul> <li>Fix the sh call (#15) (6e26308)</li> </ul>"},{"location":"changelog/#103-2023-01-26","title":"1.0.3 (2023-01-26)","text":""},{"location":"changelog/#bug-fixes_13","title":"Bug Fixes","text":"<ul> <li>Suppress traceback from sh (#14) (69902c6)</li> </ul>"},{"location":"changelog/#102-2023-01-26","title":"1.0.2 (2023-01-26)","text":""},{"location":"changelog/#bug-fixes_14","title":"Bug Fixes","text":"<ul> <li>Fix support for python 3.7.1, 3.8, 3.9, 3.10 (#13) (83a9592)</li> </ul>"},{"location":"changelog/#101-2023-01-21","title":"1.0.1 (2023-01-21)","text":""},{"location":"changelog/#bug-fixes_15","title":"Bug Fixes","text":"<ul> <li>Fix quotes used by semantic release replace (#8) (66acb67)</li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/osl-incubator/sugar.git/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in     troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with \u201cbug\u201d and \u201chelp wanted\u201d is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with \u201cenhancement\u201d and \u201chelp wanted\u201d is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>sugar could always use more documentation, whether as part of the official sugar docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/osl-incubator/sugar.git/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to     implement.</li> <li>Remember that this is a volunteer-driven project, and that     contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here\u2019s how to set up <code>sugar</code> for local development.</p> <ol> <li> <p>Fork the <code>sugar</code> repo on GitHub.</p> </li> <li> <p>Clone your fork locally::</p> <p>$ git clone git@github.com:your_name_here/sugar.git</p> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development::</p> <p>$ mkvirtualenv sugar $ cd sugar/ $ python setup.py develop</p> </li> <li> <p>Create a branch for local development::</p> <p>$ git checkout -b name-of-your-bugfix-or-feature</p> <p>Now you can make your changes locally.</p> </li> <li> <p>When you\u2019re done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox::</p> <p>$ makim tests.linter $ makim tests.unit</p> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub::</p> <p>$ git add . $ git commit -m \u201cYour detailed description of your changes.\u201d $ git push origin name-of-your-bugfix-or-feature</p> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python &gt;= 3.8.</li> </ol>"},{"location":"contributing/#tips","title":"Tips","text":"<p>To run a subset of tests::</p> <pre><code>$ pytest tests.test_containers_sugar\n</code></pre>"},{"location":"contributing/#release","title":"Release","text":"<p>This project uses semantic-release in order to cut a new release based on the commit-message.</p>"},{"location":"contributing/#commit-message-format","title":"Commit message format","text":"<p>semantic-release uses the commit messages to determine the consumer impact of changes in the codebase. Following formalized conventions for commit messages, semantic-release automatically determines the next semantic version number, generates a changelog and publishes the release.</p> <p>By default, semantic-release uses Angular Commit Message Conventions. The commit message format can be changed with the <code>preset</code> or <code>config</code> options_ of the @semantic-release/commit-analyzer and @semantic-release/release-notes-generator plugins.</p> <p>Tools such as commitizen or commitlint can be used to help contributors and enforce valid commit messages.</p> <p>The table below shows which commit message gets you which release type when <code>semantic-release</code> runs (using the default configuration):</p> Commit message Release type <code>fix(pencil): stop graphite breaking when pressure is applied</code> Fix Release <code>feat(pencil): add 'graphiteWidth' option</code> Feature Release <code>perf(pencil): remove graphiteWidth option</code> Chore <code>BREAKING CHANGE: The graphiteWidth option has been removed</code> Breaking Release <p>source: https://github.com/semantic-release/semantic-release/blob/master/README.md#commit-message-format</p> <p>As this project uses the <code>squash and merge</code> strategy, ensure to apply the commit message format to the PR's title.</p>"},{"location":"example/","title":"sugar","text":"In\u00a0[\u00a0]: Copied! <pre>import sugar\n</pre> import sugar"},{"location":"example/#sugar","title":"sugar\u00b6","text":"<p>sugar is Python library that aims to do ...</p>"},{"location":"example/#getting-started","title":"Getting Started\u00b6","text":"<p>First, check our documentation about the installation.</p> <p>Now, let's import our library:</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install sugar, run this command in your terminal:</p> <pre><code>$ pip install containers-sugar\n</code></pre> <p>Sugar is also available on conda-forge</p> <pre><code>$ conda install -c conda-forge containers-sugar\n</code></pre> <p>This is the preferred method to install sugar, as it will always install the most recent stable release.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>The sources for sugar can be downloaded from the Github repo.</p> <p>You can either clone the public repository:</p> <pre><code>$ git clone https://github.com/osl-incubator/sugar.git\n</code></pre> <p>Or download the tarball:</p> <pre><code>$ curl -OJL https://github.com/osl-incubator/sugar.git/tarball/main\n</code></pre> <p>Once you have a copy of the source, you can install it with:</p> <pre><code>$ poetry install\n</code></pre>"}]}